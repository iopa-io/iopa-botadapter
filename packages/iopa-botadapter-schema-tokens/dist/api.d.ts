/**
 * Microsoft Bot Token API - V3.1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: token
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../src/custom.d.ts" />
import { Configuration } from './configuration';
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: 'RequiredError';
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AadResourceUrls
 */
export interface AadResourceUrls {
    /**
     *
     * @type {Array<string>}
     * @memberof AadResourceUrls
     */
    resourceUrls?: Array<string>;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Error}
     * @memberof ErrorResponse
     */
    error?: Error;
}
/**
 *
 * @export
 * @interface InnerHttpError
 */
export interface InnerHttpError {
    /**
     *
     * @type {number}
     * @memberof InnerHttpError
     */
    statusCode?: number;
    /**
     *
     * @type {any}
     * @memberof InnerHttpError
     */
    body?: any;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     *
     * @type {InnerHttpError}
     * @memberof ModelError
     */
    innerHttpError?: InnerHttpError;
}
/**
 *
 * @export
 * @interface ModelVoid
 */
export interface ModelVoid {
}
/**
 *
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    channelId?: string;
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    connectionName?: string;
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    expiration?: string;
}
/**
 * The status of a particular token
 * @export
 * @interface TokenStatus
 */
export interface TokenStatus {
    /**
     * The channelId of the token status pertains to
     * @type {string}
     * @memberof TokenStatus
     */
    channelId?: string;
    /**
     * The name of the connection the token status pertains to
     * @type {string}
     * @memberof TokenStatus
     */
    connectionName?: string;
    /**
     * True if a token is stored for this ConnectionName
     * @type {boolean}
     * @memberof TokenStatus
     */
    hasToken?: boolean;
    /**
     * The display name of the service provider for which this Token belongs to
     * @type {string}
     * @memberof TokenStatus
     */
    serviceProviderDisplayName?: string;
}
/**
 * BotSignInApi - fetch parameter creator
 * @export
 */
export declare const BotSignInApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} state
     * @param {string} [codeChallenge]
     * @param {string} [emulatorUrl]
     * @param {string} [finalRedirect]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botSignInGetSignInUrl(state: string, codeChallenge?: string, emulatorUrl?: string, finalRedirect?: string, options?: any): FetchArgs;
};
/**
 * BotSignInApi - functional programming interface
 * @export
 */
export declare const BotSignInApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} state
     * @param {string} [codeChallenge]
     * @param {string} [emulatorUrl]
     * @param {string} [finalRedirect]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botSignInGetSignInUrl(state: string, codeChallenge?: string, emulatorUrl?: string, finalRedirect?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string>;
};
/**
 * BotSignInApi - factory interface
 * @export
 */
export declare const BotSignInApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {string} state
     * @param {string} [codeChallenge]
     * @param {string} [emulatorUrl]
     * @param {string} [finalRedirect]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botSignInGetSignInUrl(state: string, codeChallenge?: string, emulatorUrl?: string, finalRedirect?: string, options?: any): Promise<string>;
};
/**
 * BotSignInApi - interface
 * @export
 * @interface BotSignInApi
 */
export interface BotSignInApiInterface {
    /**
     *
     * @param {string} state
     * @param {string} [codeChallenge]
     * @param {string} [emulatorUrl]
     * @param {string} [finalRedirect]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotSignInApiInterface
     */
    botSignInGetSignInUrl(state: string, codeChallenge?: string, emulatorUrl?: string, finalRedirect?: string, options?: any): Promise<string>;
}
/**
 * BotSignInApi - object-oriented interface
 * @export
 * @class BotSignInApi
 * @extends {BaseAPI}
 */
export declare class BotSignInApi extends BaseAPI implements BotSignInApiInterface {
    /**
     *
     * @param {string} state
     * @param {string} [codeChallenge]
     * @param {string} [emulatorUrl]
     * @param {string} [finalRedirect]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotSignInApi
     */
    botSignInGetSignInUrl(state: string, codeChallenge?: string, emulatorUrl?: string, finalRedirect?: string, options?: any): Promise<string>;
}
/**
 * UserTokenApi - fetch parameter creator
 * @export
 */
export declare const UserTokenApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {AadResourceUrls} aadResourceUrls
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetAadTokens(userId: string, connectionName: string, aadResourceUrls: AadResourceUrls, channelId?: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {string} [channelId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetToken(userId: string, connectionName: string, channelId?: string, code?: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} userId
     * @param {string} [channelId]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetTokenStatus(userId: string, channelId?: string, include?: string, options?: any): FetchArgs;
    /**
     *
     * @param {string} userId
     * @param {string} [connectionName]
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenSignOut(userId: string, connectionName?: string, channelId?: string, options?: any): FetchArgs;
};
/**
 * UserTokenApi - functional programming interface
 * @export
 */
export declare const UserTokenApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {AadResourceUrls} aadResourceUrls
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetAadTokens(userId: string, connectionName: string, aadResourceUrls: AadResourceUrls, channelId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<{
        [key: string]: TokenResponse;
    }>;
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {string} [channelId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetToken(userId: string, connectionName: string, channelId?: string, code?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenResponse>;
    /**
     *
     * @param {string} userId
     * @param {string} [channelId]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetTokenStatus(userId: string, channelId?: string, include?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TokenStatus>>;
    /**
     *
     * @param {string} userId
     * @param {string} [connectionName]
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenSignOut(userId: string, connectionName?: string, channelId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelVoid>;
};
/**
 * UserTokenApi - factory interface
 * @export
 */
export declare const UserTokenApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {AadResourceUrls} aadResourceUrls
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetAadTokens(userId: string, connectionName: string, aadResourceUrls: AadResourceUrls, channelId?: string, options?: any): Promise<{
        [key: string]: TokenResponse;
    }>;
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {string} [channelId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetToken(userId: string, connectionName: string, channelId?: string, code?: string, options?: any): Promise<TokenResponse>;
    /**
     *
     * @param {string} userId
     * @param {string} [channelId]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenGetTokenStatus(userId: string, channelId?: string, include?: string, options?: any): Promise<TokenStatus[]>;
    /**
     *
     * @param {string} userId
     * @param {string} [connectionName]
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userTokenSignOut(userId: string, connectionName?: string, channelId?: string, options?: any): Promise<ModelVoid>;
};
/**
 * UserTokenApi - interface
 * @export
 * @interface UserTokenApi
 */
export interface UserTokenApiInterface {
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {AadResourceUrls} aadResourceUrls
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApiInterface
     */
    userTokenGetAadTokens(userId: string, connectionName: string, aadResourceUrls: AadResourceUrls, channelId?: string, options?: any): Promise<{
        [key: string]: TokenResponse;
    }>;
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {string} [channelId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApiInterface
     */
    userTokenGetToken(userId: string, connectionName: string, channelId?: string, code?: string, options?: any): Promise<TokenResponse>;
    /**
     *
     * @param {string} userId
     * @param {string} [channelId]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApiInterface
     */
    userTokenGetTokenStatus(userId: string, channelId?: string, include?: string, options?: any): Promise<Array<TokenStatus>>;
    /**
     *
     * @param {string} userId
     * @param {string} [connectionName]
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApiInterface
     */
    userTokenSignOut(userId: string, connectionName?: string, channelId?: string, options?: any): Promise<ModelVoid>;
}
/**
 * UserTokenApi - object-oriented interface
 * @export
 * @class UserTokenApi
 * @extends {BaseAPI}
 */
export declare class UserTokenApi extends BaseAPI implements UserTokenApiInterface {
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {AadResourceUrls} aadResourceUrls
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    userTokenGetAadTokens(userId: string, connectionName: string, aadResourceUrls: AadResourceUrls, channelId?: string, options?: any): Promise<{
        [key: string]: TokenResponse;
    }>;
    /**
     *
     * @param {string} userId
     * @param {string} connectionName
     * @param {string} [channelId]
     * @param {string} [code]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    userTokenGetToken(userId: string, connectionName: string, channelId?: string, code?: string, options?: any): Promise<TokenResponse>;
    /**
     *
     * @param {string} userId
     * @param {string} [channelId]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    userTokenGetTokenStatus(userId: string, channelId?: string, include?: string, options?: any): Promise<TokenStatus[]>;
    /**
     *
     * @param {string} userId
     * @param {string} [connectionName]
     * @param {string} [channelId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTokenApi
     */
    userTokenSignOut(userId: string, connectionName?: string, channelId?: string, options?: any): Promise<ModelVoid>;
}
